name: WebScraper CI/CD

on:
  schedule:
    - cron: '0 0 * * *'  # Executa diariamente à meia-noite
  push:
    branches: [ main, master ]
    paths:
      - '**.py'
      - '**.js'
      - '**.html'
      - '**.css'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite execução manual

jobs:
  commit-lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5
        
  test:
    runs-on: ubuntu-latest
    needs: [commit-lint]
    if: always() && (github.event_name != 'pull_request' || needs.commit-lint.result == 'success')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov
          
      - name: Run tests
        run: |
          pytest --cov=src
          
  lint:
    runs-on: ubuntu-latest
    needs: [commit-lint]
    if: always() && (github.event_name != 'pull_request' || needs.commit-lint.result == 'success')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Format with black
        run: |
          black . --check
          
  docs:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: >
      success() && 
      (github.event_name == 'push' || github.event_name == 'schedule' || 
      (github.event_name == 'pull_request' && contains(github.event.pull_request.title, 'docs:')))
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pdoc3
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Generate documentation
        run: |
          pdoc --html --output-dir docs src
          
      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          
  changelog:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          git-message: 'chore(release): {version}'
          preset: 'angular'
          tag-prefix: 'v'
          output-file: 'CHANGELOG.md'
          release-count: 0
          
  notify:
    runs-on: ubuntu-latest
    needs: [docs, changelog]
    if: always()
    steps:
      - name: Get commit message
        id: get_commit_message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "::set-output name=message::$COMMIT_MSG"
          
      - name: Determine commit type
        id: commit_type
        run: |
          MSG="${{ steps.get_commit_message.outputs.message }}"
          if [[ $MSG == feat* ]]; then
            echo "::set-output name=type::feature"
          elif [[ $MSG == fix* ]]; then
            echo "::set-output name=type::bugfix"
          elif [[ $MSG == docs* ]]; then
            echo "::set-output name=type::documentation"
          else
            echo "::set-output name=type::other"
          fi
          
      - name: Send notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{secrets.MAIL_SERVER}}
          server_port: ${{secrets.MAIL_PORT}}
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: "[${{ steps.commit_type.outputs.type }}] GitHub Actions - ${{ github.workflow }} workflow completed"
          body: |
            O workflow ${{ github.workflow }} foi concluído em ${{ github.repository }}.
            
            Tipo de commit: ${{ steps.commit_type.outputs.type }}
            Mensagem: ${{ steps.get_commit_message.outputs.message }}
            Status: ${{ job.status }}
            
            Detalhes: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{secrets.NOTIFICATION_EMAIL}}
          from: GitHub Actions
